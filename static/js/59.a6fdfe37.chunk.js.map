{"version":3,"file":"static/js/59.a6fdfe37.chunk.js","mappings":"+MACA,GAAgB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,0B,SCKnIA,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,WAAYF,EAAAA,KACTG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAkCd,EAxBqC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjC,+BACE,SAAC,KAAD,CACEA,SAAUA,EACVC,cAAe,CACbL,WAAY,IAEdM,iBAAkBT,EALpB,SAOG,gBAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,YACE,4BACE,SAAC,KAAD,CAAOC,KAAK,aAAaC,GAAG,aAAaC,UAAU,aAClDJ,EAAOP,YAAcQ,EAAQR,YAAa,yBAAMO,EAAOP,aAAoB,SAE9E,mBAAQY,UAAWC,EAAAA,UAAmBC,KAAK,SAA3C,6BANH,KAT4B,ECnBrC,EAA4B,gCC6B5B,EApBsC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAG7CC,EAMEF,EANFE,SAEAC,EAIEH,EAJFG,uBAEAC,EAEEJ,EAFFI,iBACAC,EACEL,EADFK,OAEF,OACE,gBAAIR,UAAWC,EAAmBQ,QAASL,EAA3C,WACE,gBAAKM,IAAKL,EAAUM,IAAG,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAQI,SACjC,yBAAMP,KACN,0BAAOC,KACP,0BAAOC,MAGZ,E,oBCuCD,EA/CoB,WAClB,IAAQM,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAsBA,EAAMC,IAA5B,IAAvBH,OACFI,GAAUH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAsBA,EAAME,QAAQA,OAApC,IACtBC,GAAWJ,EAAAA,EAAAA,KACf,SAACC,GAAD,OAAsBA,EAAME,QAAQE,YAApC,IAEIC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,MACV,GAAE,IAKH,OAAKV,GAKH,iCACE,wBACGI,EAAQO,KAAI,SAACrB,GAAD,OACX,SAAC,EAAD,CAEEA,OAAQA,EACRC,WAAY,kBACVgB,GAASK,EAAAA,EAAAA,IAAsB,CAAE3B,GAAIK,EAAOL,KADlC,GAFPK,EAAOL,GAFH,OAUf,gCACGoB,QADH,IACGA,OADH,EACGA,EAAUQ,MAAMF,KAAI,SAACG,GAAD,OACnB,yBAAuBA,EAAQC,MAArBD,EAAQ7B,GADC,OAIvB,SAAC+B,EAAA,EAAD,CAAQpB,QAAS,kBAAMW,GAASU,EAAAA,EAAAA,IAAkB,CAAEhC,GAAI,QAAvC,EAAjB,2BAGA,gBAAKE,UAAWC,EAAAA,SAAhB,UACE,SAAC,EAAD,CAAaT,SA7BO,SAACuC,GAAD,OACxBX,EAASY,EAAAA,EAAAA,wBAAuCD,EAAO3C,YAD/B,UAIjB,SAAC,KAAD,CAAU6C,GAAG,UA6BvB,C","sources":["webpack://my-app/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/DialogsForm.tsx","webpack://my-app/./src/components/dialogs/messageTitle/MessageTitle.module.css?e0c7","components/dialogs/messageTitle/MessageTitle.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"Dialogs_dialogsItems__sdAQi\",\"active\":\"Dialogs_active__reXUi\",\"dialog\":\"Dialogs_dialog__y9RIU\",\"message\":\"Dialogs_message__HhD33\"};","import React from \"react\"\nimport { Field, Form, Formik, FormikHelpers } from \"formik\"\nimport * as Yup from \"yup\"\n\nimport classes from \"./Dialogs.module.css\"\n\nconst MessageSchema = Yup.object().shape({\n  newMessage: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(20, \"Too Long!\")\n    .required(\"Required\")\n})\n\ntype Props = {\n  onSubmit: (\n    values: { newMessage: string },\n    formikHelpers: FormikHelpers<{ newMessage: string }>\n  ) => void\n}\n\nconst DialogsForm: React.FC<Props> = ({ onSubmit }) => (\n    <>\n      <Formik\n        onSubmit={onSubmit}\n        initialValues={{\n          newMessage: \"\"\n        }}\n        validationSchema={MessageSchema}\n      >\n        {({ errors, touched }) => (\n          <Form>\n            <div>\n              <Field name=\"newMessage\" id=\"newMessage\" component=\"textarea\" />\n              {errors.newMessage && touched.newMessage ? <div>{errors.newMessage}</div> : null}\n            </div>\n            <button className={classes.addButton} type=\"submit\">\n              Write message\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  )\n\nexport default DialogsForm\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageTitle_container__rszxQ\"};","import React from 'react';\nimport { Dialog } from 'src/redux/dialogsReducer';\n\nimport classes from './MessageTitle.module.css';\n\ntype Props = {\n  dialog: Dialog;\n  openDialog: () => void;\n};\n\nconst MessageTitle: React.FC<Props> = ({ dialog, openDialog }) => {\n  const {\n    // id,\n    userName,\n    // hasNewMessages,\n    lastDialogActivityDate,\n    // lastUserActivityDate,\n    newMessagesCount,\n    photos,\n  } = dialog;\n  return (\n    <li className={classes.container} onClick={openDialog}>\n      <img alt={userName} src={photos?.small} />\n      <div>{userName}</div>\n      <span>{lastDialogActivityDate}</span>\n      <span>{newMessagesCount}</span>\n    </li>\n  );\n};\n\nexport default MessageTitle;\n","import { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button } from '@mui/material';\r\nimport DialogsForm from 'src/components/dialogs/DialogsForm';\r\nimport MessageTitle from 'src/components/dialogs/messageTitle/MessageTitle';\r\nimport { dialogsActions } from 'src/redux/dialogsPageReducer';\r\nimport {\r\n  getDialogsAction,\r\n  getMessagesListAction,\r\n  sendMessageAction,\r\n} from 'src/redux/dialogsReducer';\r\nimport { RootState } from 'src/redux/redux-store';\r\n\r\nimport classes from './Dialogs.module.css';\r\n\r\ntype ValuesType = {\r\n  newMessage: string;\r\n};\r\n\r\nconst Dialogs: FC = () => {\r\n  const { isAuth } = useSelector((state: RootState) => state.auth);\r\n  const dialogs = useSelector((state: RootState) => state.dialogs.dialogs);\r\n  const messages = useSelector(\r\n    (state: RootState) => state.dialogs.messagesList\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getDialogsAction());\r\n  }, []);\r\n\r\n  const addNewMessageForm = (values: ValuesType) =>\r\n    dispatch(dialogsActions.addMessageActionCreator(values.newMessage));\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to=\"/Login\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {dialogs.map((dialog) => (\r\n          <MessageTitle\r\n            key={dialog.id}\r\n            dialog={dialog}\r\n            openDialog={() =>\r\n              dispatch(getMessagesListAction({ id: dialog.id }))\r\n            }\r\n          />\r\n        ))}\r\n      </ul>\r\n      <div>\r\n        {messages?.items.map((message) => (\r\n          <div key={message.id}>{message.body}</div>\r\n        ))}\r\n      </div>\r\n      <Button onClick={() => dispatch(sendMessageAction({ id: 16763 }))}>\r\n        send message\r\n      </Button>\r\n      <div className={classes.messages}>\r\n        <DialogsForm onSubmit={addNewMessageForm} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n"],"names":["MessageSchema","Yup","shape","newMessage","min","max","required","onSubmit","initialValues","validationSchema","errors","touched","name","id","component","className","classes","type","dialog","openDialog","userName","lastDialogActivityDate","newMessagesCount","photos","onClick","alt","src","small","isAuth","useSelector","state","auth","dialogs","messages","messagesList","dispatch","useDispatch","useEffect","getDialogsAction","map","getMessagesListAction","items","message","body","Button","sendMessageAction","values","dialogsActions","to"],"sourceRoot":""}