{"version":3,"file":"static/js/972.03684148.chunk.js","mappings":"4QAAaA,EAAc,SAACC,GAC1B,IAAMC,EAAYD,EAAKE,MAAM,KAK7B,OAJYD,EAAU,GAAGE,MAAM,GAGT,IAFRF,EAAU,GAAGE,MAAM,EAAG,GAEA,IADvBF,EAAU,GAAGE,MAAM,EAAG,EAGpC,ECND,EAA0B,8BAA1B,EAA+D,2BAA/D,EAAsG,gCAAtG,EAAiJ,+BAAjJ,EAA8L,kCAA9L,EAAsO,0BAAtO,EAAuQ,2B,SC4EvQ,EAtDgC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,MAEnDC,EAOEH,EAPFG,GACAC,EAMEJ,EANFI,SACAC,EAKEL,EALFK,uBACAC,EAIEN,EAJFM,eAEAC,EAEEP,EAFFO,iBACAC,EACER,EADFQ,OAQIC,EAAU,mBAAeN,GAE/B,OACE,gBAAIO,UAAWC,EAAf,WACE,SAAC,KAAD,CACED,UAAWC,EACXC,QAASX,EACTY,GAAIJ,EAHN,UAKE,UAACK,EAAA,GAAD,CAAUC,WAAW,aAArB,WACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CAAQC,IAAKd,EAAUe,IAAG,OAAEX,QAAF,IAAEA,OAAF,EAAEA,EAAQY,WAEtC,SAACC,EAAA,EAAD,CACEC,QAASlB,EACTmB,UAAWrB,EACXQ,UAAWC,KAEb,UAACa,EAAA,EAAD,CAAcd,UAAWC,EAAzB,WACE,iBAAKD,UAAWC,EAAhB,WACE,iBAAMD,UAAWC,EAAjB,SACGhB,EAAYU,MAEf,SAACoB,EAAA,EAAD,CAAeb,QA5BV,SAACc,GAChBA,EAAEC,iBACFC,QAAQC,IAAI,WACb,EAyB6CnB,UAAWC,OAE9CL,IACC,0BACE,SAACwB,EAAA,EAAD,CAAOC,aAAcxB,EAAkByB,MAAM,uBAMvD,SAACC,EAAA,EAAD,CAASC,QAAQ,YAAYC,UAAU,SAG5C,E,UCLD,EAvDoB,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4CC,EAAAA,EAAAA,KAC1C,SAACC,GAAD,MAAuB,CACrBC,OAAQD,EAAME,KACdC,QAASH,EAAMG,QAAQA,QACvBC,eAAgBJ,EAAMG,QAAQC,eAHhC,IADMH,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,gBAQzBC,EAAAA,EAAAA,YAAU,WACRR,GAASS,EAAAA,EAAAA,MACV,GAAE,KAEHD,EAAAA,EAAAA,YACE,kBAAM,WACJR,GAASU,EAAAA,EAAAA,MACV,CAFD,GAGA,KAGFF,EAAAA,EAAAA,YAAU,WACR,IAAMG,EAAaL,EAAQM,KAAI,SAAChD,GAAD,OAAYA,EAAOG,EAAnB,IAC3B4C,EAAWE,SAAWN,EAAeM,QACvCF,EAAWC,KAAI,SAAC7C,GAAD,OAAQiC,GAASc,EAAAA,EAAAA,IAAgB,CAAE/C,GAAAA,IAAnC,GAElB,GAAE,CAACuC,IAEJ,IAAMS,EAAeC,OAAOC,YAAYV,GAOxC,OAAKH,GAKH,+BACE,wBACGE,EAAQM,KAAI,SAAChD,GAAD,OACX,SAAC,EAAD,CAEEA,OAAQA,EACRE,MAAOiD,EAAanD,EAAOG,IAC3BF,WAAY,kBAjBFE,EAiBmBH,EAAOG,GAhB5CiC,GAASkB,EAAAA,EAAAA,IAAsB,CAAEnD,GAAAA,UACjCiC,GAASmB,EAAAA,EAAAA,IAAmB,CAAEpD,GAAAA,KAFb,IAACA,CAiBE,GAHPH,EAAOG,GAFH,SANV,SAAC,KAAD,CAAUU,GAAG,UAiBvB,C","sources":["utils/date.ts","webpack://my-app/./src/components/dialogs/messageTitle/MessageTitle.module.css?e0c7","components/dialogs/messageTitle/MessageTitle.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["export const convertDate = (date: string) => {\n  const dateParts = date.split('T');\n  const day = dateParts[0].slice(8);\n  const month = dateParts[0].slice(5, 7);\n  const year = dateParts[0].slice(0, 4);\n  const newDate = day + '.' + month + '.' + year;\n  return newDate;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MessageTitle_wrapper__E5EV8\",\"icon\":\"MessageTitle_icon__Wrz2Q\",\"container\":\"MessageTitle_container__rszxQ\",\"userName\":\"MessageTitle_userName__nvYtz\",\"iconWrapper\":\"MessageTitle_iconWrapper__6mf0B\",\"top\":\"MessageTitle_top__QkTW4\",\"date\":\"MessageTitle_date__2F1xZ\"};","import { FC, MouseEvent } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport {\n  Avatar,\n  Badge,\n  Divider,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n} from '@mui/material';\nimport { Dialog } from 'src/types';\nimport { convertDate } from 'src/utils/date';\n\nimport classes from './MessageTitle.module.css';\n\ntype Props = {\n  dialog: Dialog;\n  openDialog: () => void;\n  title: string;\n};\n\nconst MessageTitle: FC<Props> = ({ dialog, openDialog, title }) => {\n  const {\n    id,\n    userName,\n    lastDialogActivityDate,\n    hasNewMessages,\n    // lastUserActivityDate,\n    newMessagesCount,\n    photos,\n  } = dialog;\n\n  const openMenu = (e: MouseEvent<SVGSVGElement>) => {\n    e.preventDefault();\n    console.log('openMenu');\n  };\n\n  const dialogPath = `/Dialogs/${id}`;\n\n  return (\n    <li className={classes.wrapper}>\n      <NavLink\n        className={classes.container}\n        onClick={openDialog}\n        to={dialogPath}\n      >\n        <ListItem alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <Avatar alt={userName} src={photos?.small} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={userName}\n            secondary={title}\n            className={classes.userName}\n          />\n          <ListItemIcon className={classes.iconWrapper}>\n            <div className={classes.top}>\n              <span className={classes.date}>\n                {convertDate(lastDialogActivityDate)}\n              </span>\n              <MoreHorizIcon onClick={openMenu} className={classes.icon} />\n            </div>\n            {hasNewMessages && (\n              <div>\n                <Badge badgeContent={newMessagesCount} color=\"primary\" />\n              </div>\n            )}\n          </ListItemIcon>\n        </ListItem>\n      </NavLink>\n      <Divider variant=\"fullWidth\" component=\"li\" />\n    </li>\n  );\n};\n\nexport default MessageTitle;\n","import { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport MessageTitle from 'src/components/dialogs/messageTitle/MessageTitle';\r\nimport {\r\n  dialogOpenedAction,\r\n  getDialogsAction,\r\n  getMessagesListAction,\r\n  getTitlesAction,\r\n  messagesListCleared,\r\n} from 'src/redux/dialogsReducer';\r\nimport { RootState } from 'src/redux/redux-store';\r\n\r\n// import classes from './Dialogs.module.css';~\r\n\r\nconst Dialogs: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { isAuth, dialogs, messagesTitles } = useSelector(\r\n    (state: RootState) => ({\r\n      isAuth: state.auth,\r\n      dialogs: state.dialogs.dialogs,\r\n      messagesTitles: state.dialogs.messagesTitles,\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getDialogsAction());\r\n  }, []); // eslint-disable-line\r\n\r\n  useEffect(\r\n    () => () => {\r\n      dispatch(messagesListCleared());\r\n    },\r\n    [] // eslint-disable-line\r\n  );\r\n\r\n  useEffect(() => {\r\n    const dialogsIds = dialogs.map((dialog) => dialog.id);\r\n    if (dialogsIds.length !== messagesTitles.length) {\r\n      dialogsIds.map((id) => dispatch(getTitlesAction({ id })));\r\n    }\r\n  }, [dialogs]); // eslint-disable-line\r\n\r\n  const titlesObject = Object.fromEntries(messagesTitles);\r\n\r\n  const openDialog = (id: number) => {\r\n    dispatch(getMessagesListAction({ id }));\r\n    dispatch(dialogOpenedAction({ id }));\r\n  };\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to=\"/Login\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {dialogs.map((dialog) => (\r\n          <MessageTitle\r\n            key={dialog.id}\r\n            dialog={dialog}\r\n            title={titlesObject[dialog.id]}\r\n            openDialog={() => openDialog(dialog.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n"],"names":["convertDate","date","dateParts","split","slice","dialog","openDialog","title","id","userName","lastDialogActivityDate","hasNewMessages","newMessagesCount","photos","dialogPath","className","classes","onClick","to","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","small","ListItemText","primary","secondary","ListItemIcon","MoreHoriz","e","preventDefault","console","log","Badge","badgeContent","color","Divider","variant","component","dispatch","useDispatch","useSelector","state","isAuth","auth","dialogs","messagesTitles","useEffect","getDialogsAction","messagesListCleared","dialogsIds","map","length","getTitlesAction","titlesObject","Object","fromEntries","getMessagesListAction","dialogOpenedAction"],"sourceRoot":""}