{"version":3,"file":"static/js/644.e57db413.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/common/molecules/addMessageForm/AddMessageForm.module.css?1a60","components/common/molecules/addMessageForm/AddMessageForm.tsx","webpack://my-app/./src/components/chat/ChatPage.module.css?b24b","components/chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addMessageForm\":\"AddMessageForm_addMessageForm__Ex7F4\",\"emojiContainer\":\"AddMessageForm_emojiContainer__GgOEq\"};","import { FC, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport TagFacesIcon from '@mui/icons-material/TagFaces';\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  InputAdornment,\r\n  OutlinedInput,\r\n} from '@mui/material';\r\nimport EmojiPicker, { EmojiClickData } from 'emoji-picker-react';\r\nimport { sendMessageThunkCreator } from 'src/redux/chatReducer';\r\nimport { RootState } from 'src/redux/redux-store';\r\n\r\nimport classes from './AddMessageForm.module.css';\r\n\r\nexport const AddMessageForm: FC = () => {\r\n  const [message, setMessage] = useState('');\r\n  const status = useSelector((state: RootState) => state.chat.status);\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  const sendMessage = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessageThunkCreator(message));\r\n    setMessage('');\r\n  };\r\n\r\n  const [showEmoji, setShowEmoji] = useState(false);\r\n\r\n  const handleShowEmoji = () => {\r\n    setShowEmoji((prevState) => !prevState);\r\n  };\r\n\r\n  const handleEmojiClick = (emojiData: EmojiClickData) => {\r\n    setMessage(message + emojiData.emoji);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.addMessageForm}>\r\n      <OutlinedInput\r\n        placeholder={t('chat.enter') as string}\r\n        multiline\r\n        maxRows={4}\r\n        value={message}\r\n        onChange={(e) => setMessage(e.currentTarget.value)}\r\n        fullWidth\r\n        onKeyDown={(e) => {\r\n          if (e.ctrlKey && e.key === 'Enter') {\r\n            setMessage(`${message}\\r\\n`);\r\n          } else if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            sendMessage();\r\n          }\r\n        }}\r\n        autoFocus\r\n        endAdornment={\r\n          <InputAdornment position=\"end\">\r\n            <IconButton onClick={handleShowEmoji} edge=\"end\">\r\n              <TagFacesIcon />\r\n            </IconButton>\r\n          </InputAdornment>\r\n        }\r\n      />\r\n      {showEmoji && (\r\n        <div className={classes.emojiContainer}>\r\n          <EmojiPicker\r\n            onEmojiClick={handleEmojiClick}\r\n            autoFocusSearch={false}\r\n          />\r\n        </div>\r\n      )}\r\n      <Button\r\n        onClick={sendMessage}\r\n        disabled={status !== 'ready' || !message.trim().length}\r\n        variant=\"contained\"\r\n        endIcon={<SendIcon />}\r\n      >\r\n        {t('chat.send')}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messagesWrapper\":\"ChatPage_messagesWrapper__NFx-O\",\"avatar\":\"ChatPage_avatar__6lEId\",\"messageContainer\":\"ChatPage_messageContainer__+VkiS\",\"deleted\":\"ChatPage_deleted__+jqg7\",\"messageBlock\":\"ChatPage_messageBlock__E3NSy\",\"author\":\"ChatPage_author__I+V9m\",\"message\":\"ChatPage_message__1C9-4\",\"iconWrapper\":\"ChatPage_iconWrapper__-ISCr\",\"icon\":\"ChatPage_icon__vtmug\",\"recovery\":\"ChatPage_recovery__dee87\"};","import { FC, memo, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport { Tooltip } from '@mui/material';\nimport classNames from 'classnames';\nimport { MessageType } from 'src/api/chat-api';\nimport { AddMessageForm } from 'src/components/common/molecules/addMessageForm/AddMessageForm';\nimport Loader from 'src/components/loader/Loader';\nimport avatar from 'src/images/avatar.png';\nimport { chatActions } from 'src/redux/chatReducer';\nimport { RootState } from 'src/redux/redux-store';\n\nimport classes from './ChatPage.module.css';\n\nexport const ChatPage: FC = memo(() => {\n  const { isAuth } = useSelector((state: RootState) => state.auth);\n  const status = useSelector((state: RootState) => state.chat.status);\n\n  if (!isAuth) {\n    return <Redirect to=\"/Login\" />;\n  }\n\n  return (\n    <>\n      {status === 'pending' && <Loader isFetching={status === 'pending'} />}\n      {status === 'ready' && (\n        <>\n          <Messages />\n          <AddMessageForm />\n        </>\n      )}\n    </>\n  );\n});\n\nconst Messages: FC = memo(() => {\n  const messages = useSelector((state: RootState) => state.chat.messages);\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView();\n  }, [messages]);\n\n  return (\n    <div className={classes.messagesWrapper}>\n      {messages.map((message) => (\n        <Message\n          key={message.id}\n          userId={message.userId}\n          message={message.message}\n          photo={message.photo}\n          userName={message.userName}\n          id={message.id}\n          deleted={message.deleted}\n          deletedMessage={message.deletedMessage}\n        />\n      ))}\n      <div ref={scrollRef}></div>\n    </div>\n  );\n});\n\nconst Message: FC<MessageType> = memo(\n  ({ message, userName, photo, userId, id, deleted, deletedMessage }) => {\n    const dispatch = useDispatch();\n    const { t } = useTranslation();\n\n    const handleDeleteMessage = () => {\n      dispatch(chatActions.deleteMessageActionCreator(id as string));\n    };\n\n    const handleRestoreMessage = () => {\n      dispatch(chatActions.restoreMessageActionCreator(id as string));\n    };\n\n    const [deletion, recovery] =\n      deleted && deletedMessage ? deletedMessage.split('.') : [];\n\n    return (\n      <div\n        className={classNames(classes.messageContainer, {\n          [classes.deleted]: deleted,\n        })}\n      >\n        <div className={classes.messageBlock}>\n          {!deleted && (\n            <NavLink to={'/profile/' + userId}>\n              <img\n                src={photo ?? avatar}\n                alt={userName}\n                className={classes.avatar}\n              />\n            </NavLink>\n          )}\n          <div>\n            {!deleted && (\n              <NavLink to={'/profile/' + userId}>\n                <div className={classes.author}>{userName}</div>\n              </NavLink>\n            )}\n            {!deleted && <div className={classes.message}>{message}</div>}\n            {deleted && (\n              <div className={classes.message}>\n                <span>{deletion}</span>.{' '}\n                <span\n                  className={classes.recovery}\n                  onClick={handleRestoreMessage}\n                  role=\"button\"\n                >\n                  {recovery}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n        {!deleted && (\n          <div className={classes.iconWrapper}>\n            <Tooltip\n              title={t('chat.delete') as string}\n              arrow\n              placement=\"bottom-start\"\n            >\n              <DeleteOutlineIcon\n                onClick={handleDeleteMessage}\n                className={classes.icon}\n              />\n            </Tooltip>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n"],"names":["AddMessageForm","useState","message","setMessage","status","useSelector","state","chat","dispatch","useDispatch","t","useTranslation","sendMessage","sendMessageThunkCreator","showEmoji","setShowEmoji","className","classes","OutlinedInput","placeholder","multiline","maxRows","value","onChange","e","currentTarget","fullWidth","onKeyDown","ctrlKey","key","shiftKey","preventDefault","autoFocus","endAdornment","InputAdornment","position","IconButton","onClick","prevState","edge","TagFaces","onEmojiClick","emojiData","emoji","autoFocusSearch","Button","disabled","trim","length","variant","endIcon","Send","ChatPage","memo","isAuth","auth","Loader","isFetching","Messages","to","messages","scrollRef","useRef","useEffect","current","scrollIntoView","map","Message","userId","photo","userName","id","deleted","deletedMessage","ref","split","deletion","recovery","classNames","src","avatar","alt","chatActions","role","Tooltip","title","arrow","placement","DeleteOutline"],"sourceRoot":""}